import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
from scipy import stats
from StringIO import StringIO

f = open('/Users/hhimanshu/Downloads/data/fordTrain.csv', 'r')
data = np.genfromtxt(StringIO(f.read()), delimiter=',')
f = open('/Users/hhimanshu/Downloads/data/fordTrain.csv', 'r')
data = np.genfromtxt(StringIO(f.read()), delimiter=',')
data_header_stripped = data[1:,:]
data_header_stripped = np.roll(data_header_stripped, -3, axis=1) # rolling 3 column of labels to last column
# -- finding mean -- #
d_mean = []
for i in range(33):
   	d_mean.append(sp.mean(data_header_stripped[:, i]))

# -- finding median -- #
d_median = []
for i in range(33):
   	d_median.append(sp.median(data_header_stripped[:, i]))

# -- finding standard deviation -- #
d_std = []
for i in range(33):
   	d_std.append(sp.std(data_header_stripped[:, i]))

# plotting 
plt.xlabel('Number of featues')
plt.ylabel('value of features')
plt.title('Mean, Median, Standard Deviation of StayAlert - Raw data')
plt.plot(d_mean, label='Mean')
plt.plot(d_median, label='Median')
plt.plot(d_std, label='Standard Deviation')
legend()

# normalizing based on z-score
n_data = stats.zscore(data_header_stripped[:,:])

# -- finding mean -- #
nd_mean = []
for i in range(32):
   	nd_mean.append(sp.mean(n_data[:, i]))

# -- finding median -- #
nd_median = []
for i in range(32):
   	nd_median.append(sp.median(n_data[:, i]))

# -- finding standard deviation -- #
nd_std = []
for i in range(32):
   	nd_std.append(sp.std(n_data[:, i]))

# plotting normalized data
plt.xlabel('Number of featues')
plt.ylabel('Normalized value of features')
plt.title('Mean, Median, Standard Deviation of StayAlert - Normalized')
plt.plot(nd_mean, label='Mean')
plt.plot(nd_median, label='Median')
plt.plot(nd_std, label='Standard Deviation')
legend()

N = data_header_stripped.shape[0]
np.random.shuffle(data_header_stripped)
# split data as 60%, 20%, 20% split
training = data_header_stripped[:int(N*0.6)]
cv = data_header_stripped[int(N*0.6):int(N*0.8)]
test = data_header_stripped[int(N*0.8):]

for i in np.arange(0.1, 10.0, 0.2):
	lr = LogisticRegression(C=i, penalty='l1')
	model = lr.fit(training[:,0:-1], training[:,-1])
	cv_predict = model.predict(cv[:,0:-1])
	cv_test = model.predict(test[:,0:-1])
	print 'C=', i
	print classification_report(cv[:,-1], cv_predict)
	print classification_report(test[:,-1], cv_test)
	print '----------------------------------------------------------'
